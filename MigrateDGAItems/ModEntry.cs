using System;
using Microsoft.Xna.Framework;
using MigrateDGAItems.DGAClasses;
using StardewModdingAPI;
using StardewModdingAPI.Events;
using StardewModdingAPI.Utilities;
using StardewValley;
using StardewValley.Buildings;
using StardewValley.Locations;
using StardewValley.TerrainFeatures;
using xTile.Dimensions;

namespace MigrateDGAItems
{
    /// <summary>The mod entry point.</summary>
    internal sealed class ModEntry : Mod
    {
        /*********
        ** Public methods
        *********/
        /// <summary>The mod entry point, called after the mod is first loaded.</summary>
        /// <param name="helper">Provides simplified APIs for writing mods.</param>
        public override void Entry(IModHelper helper)
        {
            helper.Events.GameLoop.GameLaunched += this.OnGameLaunched;
            helper.Events.GameLoop.SaveLoaded += this.OnSaveLoaded;
        }


        /*********
        ** Private methods
        *********/

        private void OnGameLaunched(object? sender, GameLaunchedEventArgs e)
        {
            var spacecore = this.Helper.ModRegistry.GetApi<ISpaceCoreApi>("spacechase0.SpaceCore");

            if (spacecore is null)
            {
                Monitor.Log("No SpaceCore API found! Mod will not work!", LogLevel.Error);
            }
            else
            {
                spacecore.RegisterSerializerType(typeof(CustomObject));
                spacecore.RegisterSerializerType(typeof(CustomBasicFurniture));
                spacecore.RegisterSerializerType(typeof(CustomBedFurniture));
                spacecore.RegisterSerializerType(typeof(CustomTVFurniture));
                spacecore.RegisterSerializerType(typeof(CustomFishTankFurniture));
                spacecore.RegisterSerializerType(typeof(CustomStorageFurniture));
                spacecore.RegisterSerializerType(typeof(CustomCrop));
                spacecore.RegisterSerializerType(typeof(CustomGiantCrop));
                spacecore.RegisterSerializerType(typeof(CustomMeleeWeapon));
                spacecore.RegisterSerializerType(typeof(CustomBoots));
                spacecore.RegisterSerializerType(typeof(CustomHat));
                spacecore.RegisterSerializerType(typeof(CustomFence));
                spacecore.RegisterSerializerType(typeof(CustomBigCraftable));
                spacecore.RegisterSerializerType(typeof(CustomFruitTree));
                spacecore.RegisterSerializerType(typeof(CustomShirt));
                spacecore.RegisterSerializerType(typeof(CustomPants));
                Monitor.Log("Registered subclasses with SpaceCore!", LogLevel.Alert);
            }
        }

        private void OnSaveLoaded(object? sender, SaveLoadedEventArgs e)
        {
            Utility.ForEachItem(i => { fixItem(i); return true; });
            Utility.ForEachLocation(l => fixTerrainFeatures(l));
        }

        private Item fixItem(Item item)
        {
            // If it's a DGA furniture
            if (item is CustomBasicFurniture or CustomBedFurniture or CustomFishTankFurniture or CustomStorageFurniture or CustomTVFurniture)
            {
                return item;
            }
            // If it's a DGA object
            else if (item is CustomObject)
            {
                Monitor.Log($"Error item found with name: {item.Name}", LogLevel.Debug);
                // Do some fancy string splitting on the item's name, assuming DGA formatting
                string itemName = item.Name.Split("/").Last();
                string packName = item.Name.Split("/").First();
                string packNameWithoutDGA = packName.Split(".").First() + packName.Split(".").Last();
                // Try the stupid thing of just fuzzy searching on the name
                Item fuzzyResult = Utility.fuzzyItemSearch(item.Name);
                if (fuzzyResult is not null)
                {
                    return fuzzyResult;
                }
                // Try searching for the item name generated by {{ModId}}_ItemName stripped out
                fuzzyResult = Utility.fuzzyItemSearch(packName + "_" + itemName);
                if (fuzzyResult is not null)
                {
                    return fuzzyResult;
                }
                return item;
            }
            // If it's a DGA big craftable
            else if (item is CustomBigCraftable)
            {
                return item;
            }
            // If it's a DGA weapon
            else if (item is CustomMeleeWeapon)
            {
                return item;
            }
            // If it's a DGA fence
            else if (item is CustomFence)
            {
                return item;
            }
            // If it's a DGA clothing item
            else if (item is CustomPants or CustomShirt or CustomHat or CustomBoots)
            {
                return item;
            }
            else
            {
                return item;
            }
        }

        private bool fixTerrainFeatures(GameLocation l)
        {
            foreach (KeyValuePair<Vector2, StardewValley.Object> pair in l.objects.Pairs)
            {
                Fence fence = (Fence)pair.Value;
                if (fence is CustomFence)
                {
                    // Fix the fence
                }
            }
            foreach (TerrainFeature terrain in l.terrainFeatures.Values)
            {
                if (terrain is CustomFruitTree)
                {
                    // Replace the fruit tree properly
                }
                else if (terrain is CustomGiantCrop)
                {
                    // Replace the custom giant crop properly
                }
                else if (terrain is HoeDirt)
                {
                    HoeDirt hoeDirt = (HoeDirt)terrain;
                    if (hoeDirt.crop is not null && hoeDirt.crop is CustomCrop)
                    {
                        // replace the crop properly!
                    }
                }
            }
            return true;
        }
    }
}